//aborges

/*
Testes que não passaram:
echo "\"Hello\""
echo "\\"
echo "$USER '$HOME TEST'" '$HOME "$USER"'"PAULO" $USER

Testes Básicos
echo "Hello World"
echo -n "Hello World"
echo Hello World
echo ""
echo -n ""

Testes com Variáveis
echo "$USER"
echo "$USER$HOME"
echo "$USER $HOME"
echo "User: $USER"
echo '$USER'
echo "$USER"Beta 'ola $USER' $HOME $PATH

Testes com Aspas Simples e Duplas
echo "'Hello'"
echo '"Hello"'
echo "'Hello' 'World'"
echo '"$USER"'
echo "'$USER'"
echo "$USER '$HOME TEST'" '$HOME "$USER"'"PAULO"

/*
if (str[i + 1] && str[i + 1] != 32 && str[i + 1] != c)
{
	while (str[i + 1] && str[i + 1] != 32 && str[i + 1] != c)
	{
		mat[j][k] = str[i];
		k++;
		i++;
	}
}
*/

//valgrind --leak-check=full ./minishell



char **ft_split_echo(char *str)
{
    static char mat[250][250];
    static char *result[250];
    int i = 0;
    int j = 0;

    ft_memset(mat, 0, sizeof(mat));
    ft_memset(result, 0, sizeof(result));

    i = skip_spaces(str, i);
    while (i < ft_strlen(str))
    {
        i = process_word(str, mat, &j, i);
        result[j] = mat[j];
        j++;
        i = skip_spaces(str, i + 1);
    }
    result[j] = '\0';
    return (result);
}

int skip_spaces(char *str, int i)
{
    while (str[i] && str[i] == 32)
        i++;
    return i;
}

int process_word(char *str, char mat[250][250], int *j, int i)
{
    int k = 0;
    int c = detect_quote(str, mat, &i, *j, &k);

    while (str[i] && str[i] != c)
    {
        mat[*j][k++] = str[i++];
    }
    process_remaining_word(str, mat, *j, &i, &k, c);

    if (str[i]) {
        mat[*j][k] = str[i];
        i++;
    } else {
        mat[*j][k] = '\0';
    }
    mat[*j][k + 1] = '\0';
    return i;
}


int detect_quote(char *str, char mat[250][250], int *i, int j, int *k)
{
    int c;
    if (str[*i] == 34 || str[*i] == 39)
    {
        mat[j][(*k)++] = str[(*i)++];
        c = str[*i - 1];
    }
    else
        c = 32;
    return c;
}

void process_remaining_word(char *str, char mat[250][250], int j, int *i, int *k, int c)
{
    if ((*i + 1) < ft_strlen(str) && str[*i + 1] && str[*i] != 32 && str[*i + 1] != c)
    {
        while (str[*i + 1] && str[*i + 1] != 32 && str[*i + 1] != c)
        {
            mat[j][(*k)++] = str[(*i)++];
        }
    }
}


//split funcional
/*
char	**ft_split_echo(char *str)
{
	static char	mat[250][250];
	static char	*result[250];
	int			i;
	int			j;
	int			k;
	int			c;

	i = 0;
	j = 0;
	ft_memset(mat, 0, sizeof(mat));
	ft_memset(result, 0, sizeof(result));
	while (str[i] && str[i] == 32)
		i++;
	while (i < ft_strlen(str))
	{
		k = 0;
		if (str[i] == 34)
		{
			mat[j][k] = str[i];
			k++;
			c = 34;
			i++;
		}
		else if (str[i] == 39)
		{
			mat[j][k] = str[i];
			k++;
			c = 39;
			i++;
		}
		else
		{
			c = 32;
		}
		while (str[i] && str[i] != c)
		{
			mat[j][k] = str[i];
			k++;
			i++;
		}
		if ((i + 1) < ft_strlen(str) && str[i + 1] && str[i] != 32 && str[i + 1] != c)
		{
			while (str[i + 1] && str[i + 1] != 32 && str[i + 1] != c)
			{
				mat[j][k] = str[i];
				k++;
				i++;
			}
		}
		if (str[i])
		{
			mat[j][k] = str[i];
			mat[j][k + 1] = '\0';
		}
		else
			mat[j][k] = '\0';
		result[j] = mat[j];
		i++;
		j++;

		while (i < ft_strlen(str) && str[i] && str[i] == 32)
			i++;
	}
	result[j] = '\0';
	return (result);
}
*/